// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: userdata.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "userdata"(
    name,
    email,
    role,
    passwordhash
) VALUES ($1,$2,$3,$4) RETURNING id, name, email, role, passwordhash
`

type CreateUserParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	Role         string `json:"role"`
	Passwordhash string `json:"passwordhash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Userdatum, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Passwordhash,
	)
	var i Userdatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Passwordhash,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, role, passwordhash
FROM "userdata"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Userdatum, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i Userdatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Passwordhash,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, role, passwordhash
FROM "userdata"
WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (Userdatum, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i Userdatum
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Passwordhash,
	)
	return i, err
}

const resetPassword = `-- name: ResetPassword :one
UPDATE "userdata" SET passwordhash = $1 WHERE id = $2 RETURNING name,email
`

type ResetPasswordParams struct {
	Passwordhash string `json:"passwordhash"`
	ID           int32  `json:"id"`
}

type ResetPasswordRow struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) (ResetPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, resetPassword, arg.Passwordhash, arg.ID)
	var i ResetPasswordRow
	err := row.Scan(&i.Name, &i.Email)
	return i, err
}
