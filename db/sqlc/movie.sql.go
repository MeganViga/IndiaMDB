// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: movie.sql

package db

import (
	"context"
	"time"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO "movie"(
    name,
    summary,
    language,
    genre,
    release_date
) VALUES ($1,$2,$3,$4,$5) RETURNING id, name, summary, language, genre, release_date
`

type CreateMovieParams struct {
	Name        string    `json:"name"`
	Summary     string    `json:"summary"`
	Language    string    `json:"language"`
	Genre       string    `json:"genre"`
	ReleaseDate time.Time `json:"release_date"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Name,
		arg.Summary,
		arg.Language,
		arg.Genre,
		arg.ReleaseDate,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Language,
		&i.Genre,
		&i.ReleaseDate,
	)
	return i, err
}

const editMovie = `-- name: EditMovie :many
UPDATE "movie"
SET name = $1,
    summary = $2,
    language = $3,
    genre = $4,
    release_date = $5
WHERE id = $6 RETURNING id, name, summary, language, genre, release_date
`

type EditMovieParams struct {
	Name        string    `json:"name"`
	Summary     string    `json:"summary"`
	Language    string    `json:"language"`
	Genre       string    `json:"genre"`
	ReleaseDate time.Time `json:"release_date"`
	ID          int32     `json:"id"`
}

func (q *Queries) EditMovie(ctx context.Context, arg EditMovieParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, editMovie,
		arg.Name,
		arg.Summary,
		arg.Language,
		arg.Genre,
		arg.ReleaseDate,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Language,
			&i.Genre,
			&i.ReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovieByID = `-- name: GetMovieByID :one
SELECT id, name, summary, language, genre, release_date 
FROM "movie"
WHERE id = $1
`

func (q *Queries) GetMovieByID(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieByID, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Language,
		&i.Genre,
		&i.ReleaseDate,
	)
	return i, err
}

const getMovieByName = `-- name: GetMovieByName :one
SELECT id, name, summary, language, genre, release_date
FROM "movie"
WHERE name = $1
`

func (q *Queries) GetMovieByName(ctx context.Context, name string) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieByName, name)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Language,
		&i.Genre,
		&i.ReleaseDate,
	)
	return i, err
}

const getMoviesByGenre = `-- name: GetMoviesByGenre :many
SELECT id, name, summary, language, genre, release_date
FROM "movie"
WHERE genre = $1
`

func (q *Queries) GetMoviesByGenre(ctx context.Context, genre string) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByGenre, genre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Language,
			&i.Genre,
			&i.ReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesByLanguage = `-- name: GetMoviesByLanguage :many
SELECT id, name, summary, language, genre, release_date
FROM "movie"
WHERE language = $1
`

func (q *Queries) GetMoviesByLanguage(ctx context.Context, language string) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByLanguage, language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Language,
			&i.Genre,
			&i.ReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
